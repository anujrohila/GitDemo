//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2015-01-28 - 12:02:31
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using Itsyazilim.Web.Domain;
using Itsyazilim.Web.Database.ORM;

namespace Itsyazilim.Web.Domain
{

    /// <summary>
    /// Assembler for <see cref="DefProductType"/> and <see cref="DefProductTypeDTO"/>.
    /// </summary>
    public static partial class DefProductTypeAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="DefProductTypeDTO"/> converted from <see cref="DefProductType"/>.</param>
        static partial void OnDTO(this DefProductType entity, DefProductTypeDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="DefProductType"/> converted from <see cref="DefProductTypeDTO"/>.</param>
        static partial void OnEntity(this DefProductTypeDTO dto, DefProductType entity);

        /// <summary>
        /// Converts this instance of <see cref="DefProductTypeDTO"/> to an instance of <see cref="DefProductType"/>.
        /// </summary>
        /// <param name="dto"><see cref="DefProductTypeDTO"/> to convert.</param>
        public static DefProductType ToEntity(this DefProductTypeDTO dto)
        {
            if (dto == null) return null;

            var entity = new DefProductType();

            entity.ProductTypeId = dto.ProductTypeId;
            entity.ProductTypeName = dto.ProductTypeName;
            entity.CreatedBy = dto.CreatedBy;
            entity.CreatedOn = dto.CreatedOn;
            entity.IsDeleted = dto.IsDeleted;
            entity.DeletedBy = dto.DeletedBy;
            entity.DeletedOn = dto.DeletedOn;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="DefProductType"/> to an instance of <see cref="DefProductTypeDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="DefProductType"/> to convert.</param>
        public static DefProductTypeDTO ToDTO(this DefProductType entity)
        {
            if (entity == null) return null;

            var dto = new DefProductTypeDTO();

            dto.ProductTypeId = entity.ProductTypeId;
            dto.ProductTypeName = entity.ProductTypeName;
            dto.CreatedBy = entity.CreatedBy;
            dto.CreatedOn = entity.CreatedOn;
            dto.IsDeleted = entity.IsDeleted;
            dto.DeletedBy = entity.DeletedBy;
            dto.DeletedOn = entity.DeletedOn;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="DefProductTypeDTO"/> to an instance of <see cref="DefProductType"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<DefProductType> ToEntities(this IEnumerable<DefProductTypeDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="DefProductType"/> to an instance of <see cref="DefProductTypeDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<DefProductTypeDTO> ToDTOs(this IEnumerable<DefProductType> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
